Aşağıda, “projemizin amacını, kapsamını ve yaklaşımını” detaylıca anlatan bir metin (prompt) bulacaksın. Bu metin, hem iç doküman olarak kullanılabilir hem de projeyi anlatan “yüksek seviyeli gereksinim / niyet metni” niteliği taşıyabilir. Ek olarak, gelecekte başka analiz tiplerini ekleyebilmek için modüler tasarıma vurgu yapıyoruz. Umarım işine yarar!

Endpoint Analiz Projesi: Amacı, Yaklaşımı ve Kapsamı

Amaç
	•	Spring tabanlı projelerde sağlanan (provide) ve tüketilen (consume) endpointleri statik analiz yoluyla tespit etmek.
	•	Bu tespit edilen endpointlerin detaylı bilgisini (HTTP method, path, request/response body, parametreler, vb.) tek bir JSON dosyasında toplamak.
	•	Özellikle Feign Client üzerinden yapılan çağrıları analiz etmeye öncelik vermek; ancak modüler bir yapıyla, gelecekte RestTemplate, WebClient vb. farklı “consumer” kütüphanelerini de kolayca ekleyebilmek.

Motivasyon
	•	Mikroservis veya çoklu servis yapılarında “hangi servis hangi endpointi sunuyor, hangisi hangi endpointi çağırıyor” gibi sorular zorlaşabiliyor.
	•	Bir bakışta projedeki tüm endpoint ilişkilerini görmek, bakım ve dokümantasyon açısından büyük kolaylık sağlar.
	•	Ayrıca değişiklik yönetiminde, “şu endpointi değiştireceğim, hangi servislere dokunmam gerekiyor?” sorusunu yanıtlamak çok daha hızlı olur.

Analiz Kapsamı ve Stratejisi
	1.	Statik Analiz
	•	Sadece .java dosyaları taranacak (kod çalıştırılmayacak).
	•	Kaynak kodu üzerinde annotation’lara, metot imzalarına ve class-level bilgilere bakarak endpoint detayları toplanacak.
	2.	“Provided” (Sunulan) Endpointler
	•	Spring’in @Controller, @RestController, @RequestMapping vb. annotation’larını kullanan sınıflar bulunacak.
	•	Hem class-level hem method-level path tanımları (/users, /orders, vb.) keşfedilecek.
	•	HTTP method (GET, POST, PUT, DELETE, PATCH, vb.) annotation’ları (@GetMapping, @PostMapping, @RequestMapping(method=...)) ayrıştırılacak.
	•	Dikkat edilecek edge case’ler:
	•	Sadece @Controller + @ResponseBody kullanımı,
	•	@RequestBody ile direkt DTO return eden metotlar,
	•	ResponseEntity<?> ile sarmalanmış dönüş tipleri,
	•	Class-level path + method-level path birleşimi,
	•	Bir metotta birden fazla yol (örn. @RequestMapping(value = {"/v1", "/v2"}, method = {RequestMethod.GET})).
	•	Parametre tiplerinin (PathVariable, RequestParam, vs.) farklı kullanım şekilleri de yakalanacak (örn. @PathVariable("id"), @RequestParam("status")).
	3.	“Consumed” (Tüketilen) Endpointler
	•	İlk aşamada Feign Client odaklı analiz.
	•	@FeignClient(name=...) annotation’ına sahip interface’ler bulunacak.
	•	Metot-level @GetMapping, @PostMapping vb. incelenerek HTTP method, path, parametre gibi bilgiler toplanacak.
	•	Edge case’ler:
	•	@FeignClient’te name parametresi verilmeyebilir (o zaman “undefined” olarak kaydediyoruz).
	•	Class-level @RequestMapping + method-level path birleştirilmesi,
	•	Farklı HTTP method tanımları,
	•	PathVariable veya QueryParam kullanımındaki değişken annotation parametreleri (@PathVariable("id"), @RequestParam("foo") vs.).
	•	Tasarımı modüler yapıyoruz ki ileride “RestTemplateAnalyzer”, “WebClientAnalyzer” gibi yeni analiz bileşenleri eklemek çok kolay olsun.
	4.	Request ve Response Body Analizi
	•	Controller veya Feign Client metotlarında @RequestBody, @ResponseBody vb. annotation’lar üzerinden hangi DTO veya POJO’nun alınıp verildiği tespit edilerek,
	•	Bu objedeki field’lar (ör. “username: String”, “email: String”) JSON formatında listelenecek.
	•	ResponseEntity<MyDto> gibi sarmalanmış tipler de parse edilip, nihayetinde “MyDto” bileşenini bulmaya çalışacağız.
	•	Edge case: Dönüş tipi, direkt “void” veya “String” olabilir. Yine JSON’da “responseBody”: null ya da “responseBody”: { “value”: “String” } gibi tutarak durumu yansıtmalıyız.
	5.	Edge Case’lere Odaklanma
	•	Path birleştirmesi (class-level + method-level).
	•	Çoklu HTTP method veya path tanımı.
	•	ResponseEntity vs. direkt objeyle dönüş.
	•	Parametre isimleri ile annotation parametre isimleri farklı olabilir (örn. @RequestParam("xyz") String param).
	•	Inheritance (miras): Bir base controller ya da base FeignClient interface’i var, alt sınıflar metotları override ediyor olabilir.

Beklenen Çıktı: JSON Dosyası

Analizin sonucunda, her servisin:
	•	Service Adı (serviceName gibi)
	•	providedEndpoints:
	•	className, basePath, bir de methods listesi;
	•	method içlerinde: methodName, httpMethod, path, fullPath, pathVariables, queryParameters, requestBody, responseBody vs.
	•	consumedEndpoints:
	•	clientName, className, basePath, methods listesi (metot bazında yine methodName, httpMethod, path vb.)

şeklinde bir JSON nesnesi oluşturulacak. Bu JSON dosyası, Swagger benzeri “kim, hangi path’i kullanıyor, hangi parametreleri bekliyor?” gibi sorulara hızlı yanıt vermek için kullanılabilecek.

Örneğin, final rapordaki “consumedEndpoints” altında, Feign Client “orderService”’in “/orders” path’i ve “GET /{id}” metodunu nasıl çağırdığı gibi tüm veriler yer alacak. “providedEndpoints” bölümünde de “UserController”’ın “GET /users/{id}” metoduna dair parametreler gibi detaylar bulunacak.

Gelecekteki Gelişmelere Uygun Modüler Yapı
	•	Proje, parser katmanı (RestControllerParser, FeignClientParser gibi), domain katmanı (ProvidedEndpoint, ConsumedEndpoint, vs.), aggregator (bunları birleştirip rapor oluşturan katman) ve output (JSON formatı) olarak tasarlanırsa, yeni özellik eklemek (ör. “RestTemplate kullanımı da analiz edelim”) kolaylaşır.
	•	Aynı şekilde JSON haricinde başka çıktı formatları (CSV, YAML vb.) eklemek gerekirse de sadece output katmanında yeni bir formatter eklemek yeterli olur.

Özet

Bu proje, Spring ile geliştirilmiş servislerde:
	1.	Provider (Controller, RestController vb.) tarafında sunulan endpointleri,
	2.	Consumer (ilk etapta Feign Client) tarafında çağrılan endpointleri,
	3.	Her bir metodun HTTP, path, parametre, request/response gövdesi gibi detaylarını,
	4.	Tüm edge case ve farklı kullanım şekillerini göz önüne alarak,
	5.	Statik analiz yöntemiyle .java dosyaları üzerinden,
	6.	Tek bir JSON dosyası olarak raporlayan bir araç geliştirmeyi hedefler.

Modüler yaklaşım sayesinde, ileride başka analiz tipleri veya çıktı formatları eklemek mümkün olacak. Böylece mikroservis mimarisindeki karmaşaya son verip, hangi servis nereden veri alıyor, nerede endpoint sunuyor, bunları tek bakışta görebileceğiz.

	Not: Bu doküman, projenin yüksek seviyede ne yaptığını anlatan bir “prompt” / “giriş dokümanı” olarak tasarlanmıştır. Gerçek hayatta ekibin ihtiyaçlarına göre buradaki maddeler daha da detaylandırılabilir (örneğin, spesifik bir AST parsing kütüphanesi seçimi vb.).